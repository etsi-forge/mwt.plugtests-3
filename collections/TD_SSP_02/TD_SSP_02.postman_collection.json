{
	"info": {
		"_postman_id": "e60f8b94-7a50-450c-a371-ffff1a607b03",
		"name": "TD_SSP_02",
		"description": "Interoperability Test Description\r\nIdentifier\tTD_ SDN_SSP_02\r\nTest Objective\tThe service topology information is requested from the single DC under test in TD_SDN_SSP_01. The received information is checked to correctly list the newly created service.\r\nConfiguration\tCFG_03\r\nReferences\t\r\nApplicability\tMW_8040, MW_8345, MW_TETOPO, MW_MWTOPO, MW_ETHSVC\r\n\r\nPre-test conditions\t•\tThe Domain Controller instance is up and running normally\r\n•\tAll the devices are upgraded to correct versions\r\n•\tAll basic configurations are completed (e.g., NE_id, OSPF, PCEP, etc.) \r\n•\tThe Restconf server is serviceable.\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TD_SSP_02-Step-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6788df2d-b517-4bd5-8081-76e73c9b1c51",
						"exec": [
							"// clean environment variables\r",
							"pm.environment.unset('TD_SDN_RESTCONF_PATH');\r",
							"\r",
							"// Step-1, validation: The response body should contain information about the created L2 service in JSON format referring to Annex D.3\r",
							"pm.test('Response is OK', function() {\r",
							"    pm.expect(pm.response).to.have.property('code', 200);\r",
							"});\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var settings = pm.environment.get('TD_SDN_SETTINGS');\r",
							"var companyName = pm.environment.get('TD_SDN_COMPANY');\r",
							"var companySettings = settings.companies[companyName];\r",
							"\r",
							"// applicable only for Intracom Domain\r",
							"var currentlyActiveLocalService = pm.environment.get('TD_SDN_ICOM_ACTIVE_LOCAL_SERVICE');\r",
							"\r",
							"var topLevelPropertyName = responseJson.hasOwnProperty('etht-svc') ? 'etht-svc' : 'ietf-eth-tran-service:etht-svc';\r",
							"var profileName = 'bw_profile_' + settings.servicename;\r",
							"var bandwidthProfile = companySettings.integratedProfile ? parseIntegratedProfile(responseJson[topLevelPropertyName]['etht-svc-instances']) : responseJson[\"ietf-eth-tran-service:etht-svc\"][\"globals\"][\"etht-svc-bandwidth-profiles\"];\r",
							"var serviceInstances = responseJson[\"ietf-eth-tran-service:etht-svc\"][\"etht-svc-instances\"];\r",
							"\r",
							"var vlanId = settings.vlanId;\r",
							"var CIR_value = settings.cir;\r",
							"var EIR_value = settings.eir;\r",
							"var provider_id = companySettings.ethProviderId;\r",
							"var client_id = companySettings.ethClientId;\r",
							"var eth_topology_id = companySettings.ethTopologyId;\r",
							"\r",
							"// id of the nodes\r",
							"var access_node_1_id = companySettings.svc['access-port1']['access-node-id'];\r",
							"var access_node_2_id = companySettings.svc['access-port2']['access-node-id'];\r",
							"\r",
							"// id of node1 -> a-link-aggr\r",
							"var access_node_1_ltp_aggr_access_port_id = 1;\r",
							"var access_node_1_ltp_aggr_access_ltp_id  = companySettings.svc['access-port1']['a-link-aggr-id'];\r",
							"\r",
							"// id of node2 -> a-link-local\r",
							"var access_node_2_ltp_local_access_port_id = 2; \r",
							"var access_node_2_ltp_local_access_ltp_id  = companySettings.svc['access-port2']['a-link-local-id'];\r",
							"\r",
							"// id of node2 -> inter-d-w\r",
							"var access_node_2_ltp_west_access_port_id  = 2;\r",
							"var access_node_2_ltp_west_access_ltp_id   = companySettings.svc['access-port2']['i-d-link-W-id'];\r",
							"\r",
							"// id of node2 -> inter-d-e\r",
							"var access_node_2_ltp_east_access_port_id  = 2;\r",
							"var access_node_2_ltp_east_access_ltp_id   = companySettings.svc['access-port2']['i-d-link-E-id'];\r",
							"\r",
							"var sVlan = 'ietf-eth-tran-types:classify-s-vlan';\r",
							"var cVlan = 'ietf-eth-tran-types:classify-c-vlan';\r",
							"var services = [ \"S1_local\", \"S2_local\", \"S3_local\", \"S1-inter-d\", \"S2-inter-d\", \"S1-leaf2\", \"S2-leaf2\"];\r",
							"var higerEthSvcModelVer = companySettings.higerEthSvcModelVer;\r",
							"var integratedProfile = companySettings.integratedProfile;\r",
							"\r",
							"(function() {\r",
							"    var topLevelObject = null;\r",
							"    pm.test('validate Response Body', function() {\r",
							"        pm.expect(responseJson).to.have.property(topLevelPropertyName);\r",
							"        topLevelObject = responseJson[topLevelPropertyName];\r",
							"    });\r",
							"    \r",
							"    // Skip global bandwidth profile check if profile is defined within service node\r",
							"    if (!companySettings.integratedProfile) {\r",
							"        pm.test('Validate Response Body for \"globals\" node', function() {\r",
							"            pm.expect(topLevelObject).to.have.property('globals');\r",
							"            pm.expect(responseJson[topLevelPropertyName].globals).to.have\r",
							"                    .property('etht-svc-bandwidth-profiles');\r",
							"            var profileArr = responseJson[topLevelPropertyName].globals['etht-svc-bandwidth-profiles'];\r",
							"            pm.expect(Array.isArray(profileArr)).be.true;\r",
							"        });\r",
							"    }\r",
							"    \r",
							"    pm.test(\"Bandwidth profile existence check\", function(){\r",
							"        checkExistenceOfProfile(bandwidthProfile);\r",
							"    });\r",
							"\r",
							"    pm.test('Bandwidth profile values check', function(){\r",
							"        validateProfileValues(bandwidthProfile[0]);\r",
							"    });\r",
							"\r",
							"    pm.test('Validate Response Body for \"etht-svc-instances\" array', function() {\r",
							"        pm.expect(topLevelObject).to.have.property('etht-svc-instances');\r",
							"        var instanceArr = topLevelObject['etht-svc-instances'];\r",
							"        pm.expect(Array.isArray(instanceArr)).be.true;\r",
							"    });\r",
							"\r",
							"    for( var s in services) {\r",
							"        var service = services[s];\r",
							"        var serviceInstance = searchForService(service);\r",
							"\r",
							"        pm.test('Service existence check for service ' + service, function(){\r",
							"            checkExistenceOfService(serviceInstance);\r",
							"        });\r",
							"\r",
							"        pm.test('Validating Service Values for service ' + service, function() {\r",
							"            validateServiceValues(serviceInstance);\r",
							"        });\r",
							"   }\r",
							"} \r",
							"());\r",
							"\r",
							"function parseIntegratedProfile(svcInstancesArr) {\r",
							"    var numSvc = svcInstancesArr.length;\r",
							"    for (var i = 0; i < numSvc; ++i) {\r",
							"        // profile only exists in local services and is same for all local services, extract profile from S1_local\r",
							"        if (svcInstancesArr[i]['etht-svc-name'] !== \"S1_local\") {\r",
							"            continue;\r",
							"        }\r",
							"        var endPointsArr = svcInstancesArr[i]['etht-svc-end-points'];\r",
							"        var numEndPoints = endPointsArr.length;\r",
							"        for (var j = 0; j < numEndPoints; ++j) {\r",
							"            var endPoints = endPointsArr[j];\r",
							"            if (endPoints['ingress-egress-bandwidth-profile']) {\r",
							"                // return as an array\r",
							"                return [endPoints['ingress-egress-bandwidth-profile']];\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return null;\r",
							"}\r",
							"\r",
							"function searchForService(serviceName) {\r",
							"    for(var s in serviceInstances) {\r",
							"        if(serviceInstances[s][\"etht-svc-name\"] === serviceName) {\r",
							"            return serviceInstances[s];\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"function checkExistenceOfProfile(bandwidthProfile) {\r",
							"        pm.expect( bandwidthProfile !== null).to.be.true;\r",
							"}\r",
							"\r",
							"function validateProfileValues(bandwidthProfile) {\r",
							"        pm.expect(bandwidthProfile).to.have\r",
							"            .property('bandwidth-profile-type','ietf-eth-tran-types:mef-10-bwp');\r",
							"        pm.expect(bandwidthProfile).to.have.property('CIR');\r",
							"        pm.expect(parseInt(bandwidthProfile['CIR'])).to.equal(parseInt(CIR_value));\r",
							"        pm.expect(bandwidthProfile).to.have.property('EIR');\r",
							"        pm.expect(parseInt(bandwidthProfile['EIR'])).to.equal(parseInt(EIR_value));\r",
							"        pm.expect(bandwidthProfile).to.have.property('color-aware');\r",
							"        if (typeof(bandwidthProfile['color-aware']) === 'boolean') {\r",
							"            pm.expect(bandwidthProfile['color-aware']).be.true;\r",
							"        } else {\r",
							"            pm.expect('' + bandwidthProfile['color-aware']).to.equal('' + true);\r",
							"        }\r",
							"        pm.expect(bandwidthProfile).to.have.property('coupling-flag');\r",
							"        if (typeof(bandwidthProfile['coupling-flag']) === 'boolean') {\r",
							"            pm.expect(bandwidthProfile['coupling-flag']).be.true;\r",
							"        } else {\r",
							"            pm.expect('' + bandwidthProfile['coupling-flag']).to.equal('' + true);\r",
							"        }\r",
							"}\r",
							"\r",
							"function checkExistenceOfService(service) {\r",
							"        pm.expect(service !== null).to.be.true;\r",
							"}\r",
							"\r",
							"function validateServiceValues(service) {\r",
							"    if(service[\"etht-svc-name\"] === 'S1_local') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_1_ltp_aggr_access_port_id,  access_node_1_id, access_node_1_ltp_aggr_access_ltp_id,  201, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_local_access_port_id, access_node_2_id, access_node_2_ltp_local_access_ltp_id, 101, cVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"    else if(service[\"etht-svc-name\"] === 'S2_local') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_1_ltp_aggr_access_port_id,  access_node_1_id, access_node_1_ltp_aggr_access_ltp_id,  209, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_local_access_port_id, access_node_2_id, access_node_2_ltp_local_access_ltp_id, 103, cVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"    else if(service[\"etht-svc-name\"] === 'S3_local') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_1_ltp_aggr_access_port_id,  access_node_1_id, access_node_1_ltp_aggr_access_ltp_id,  210, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_local_access_port_id, access_node_2_id, access_node_2_ltp_local_access_ltp_id, 104, cVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"    else if (service[\"etht-svc-name\"] === 'S1-inter-d') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_1_ltp_aggr_access_port_id, access_node_1_id, access_node_1_ltp_aggr_access_ltp_id,   202, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_west_access_port_id, access_node_2_id, access_node_2_ltp_west_access_ltp_id,   202, sVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"    else if (service[\"etht-svc-name\"] === 'S2-inter-d') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_1_ltp_aggr_access_port_id, access_node_1_id, access_node_1_ltp_aggr_access_ltp_id,   203, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_east_access_port_id, access_node_2_id, access_node_2_ltp_east_access_ltp_id,   203, sVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"    else if (service[\"etht-svc-name\"] === 'S1-leaf2') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_2_ltp_west_access_port_id-1, access_node_2_id, access_node_2_ltp_west_access_ltp_id,   208, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_east_access_port_id, access_node_2_id, access_node_2_ltp_east_access_ltp_id,   208, sVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"    else if (service[\"etht-svc-name\"] === 'S2-leaf2') {\r",
							"        checkServiceBeginning(service);\r",
							"        checkServiceElement(service, 0, access_node_2_ltp_west_access_port_id-1, access_node_2_id, access_node_2_ltp_west_access_ltp_id,   2009, sVlan);\r",
							"        checkServiceElement(service, 1, access_node_2_ltp_local_access_port_id, access_node_2_id, access_node_2_ltp_local_access_ltp_id,   1003, cVlan);\r",
							"        checkServiceEnding(service);\r",
							"    }\r",
							"}\r",
							"\r",
							"function checkServiceBeginning(service) {\r",
							"    pm.expect(service).to.have.property('etht-svc-type','ietf-eth-tran-types:p2p-svc');\r",
							"    if (higerEthSvcModelVer) {\r",
							"        pm.expect(service).to.have.property('te-topology-identifier')\r",
							"        pm.expect(service['te-topology-identifier']).to.have.property('provider-id',provider_id);\r",
							"        pm.expect(service['te-topology-identifier']).to.have.property('client-id',client_id);\r",
							"        pm.expect(service['te-topology-identifier']).to.have.property('topology-id',eth_topology_id);\r",
							"    } else {\r",
							"        pm.expect(service).to.have.property('access-provider-id',provider_id);\r",
							"        pm.expect(service).to.have.property('access-client-id',client_id);\r",
							"        pm.expect(service).to.have.property('access-topology-id',eth_topology_id);\r",
							"    }\r",
							"    \r",
							"}\r",
							"\r",
							"function checkServiceElement(service, n, accessPortId, accessNodeId, accessLtpPortId, vlanId, vlanType) {\r",
							"    if (higerEthSvcModelVer) {\r",
							"        pm.expect(service['etht-svc-end-points'][n]['etht-svc-access-points'][0]).to.have.property('access-point-id',(accessPortId).toString());\r",
							"        pm.expect(service['etht-svc-end-points'][n]['etht-svc-access-points'][0]).to.have.property('access-node-id',accessNodeId);\r",
							"        pm.expect(service['etht-svc-end-points'][n]['etht-svc-access-points'][0]).to.have.property('access-ltp-id',accessLtpPortId);\r",
							"        pm.expect(service['etht-svc-end-points'][n]).to.have.property('service-classification-type','ietf-eth-tran-types:vlan-classification');\r",
							"        pm.expect(service['etht-svc-end-points'][n]).to.have.property('outer-tag');\r",
							"        pm.expect(service['etht-svc-end-points'][n]['outer-tag']).to.have.property('tag-type',vlanType);\r",
							"        pm.expect(service['etht-svc-end-points'][n]['outer-tag']).to.have.property('vlan-value', vlanId);\r",
							"        if (vlanType === 'ietf-eth-tran-types:classify-c-vlan') {\r",
							"            if (integratedProfile) {\r",
							"                pm.expect(service['etht-svc-end-points'][1]).to.have.property('ingress-egress-bandwidth-profile');\r",
							"            } else {\r",
							"                pm.expect(service['etht-svc-end-points'][1]).to.have.property('ingress-egress-bandwidth-profile-name', profileName);\r",
							"            }\r",
							"        }\r",
							"    } else {\r",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.have.property('access-port-id',accessPortId);\r",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.have.property('access-node-id',accessNodeId);\r",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.have.property('access-ltp-id', accessLtpPortId);\r",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.have.property('service-classification-type','ietf-eth-tran-types:vlan-classification');\r",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.have.property('outer-tag');\r",
							"        pm.expect(service['etht-svc-access-ports'][n]['outer-tag']).to.have.property('tag-type',vlanType);\r",
							"        pm.expect(service['etht-svc-access-ports'][n]['outer-tag']).to.have.property('vlan-value', vlanId);\r",
							"        if (vlanType === 'ietf-eth-tran-types:classify-c-vlan') {\r",
							"            pm.expect(service['etht-svc-access-ports'][n]).to.have.property('ingress-egress-bandwidth-profile-name', profileName);\r",
							"        } else {\r",
							"            pm.expect(service['etht-svc-access-ports'][n]).to.not.have.property('ingress-egress-bandwidth-profile-name');\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"function checkServiceEnding(service) {\r",
							"    var state = \"up\";\r",
							"    var serviceName = service[\"etht-svc-name\"];\r",
							"    if ('Intracom' === companyName && serviceName.includes(\"local\")) {\r",
							"        state = \"down\";\r",
							"    }\r",
							"    pm.expect(service).to.have.property('admin-status');\r",
							"    // The status value is changed to 'tunnel-admin-state-up' in the new YANG model\r",
							"    pm.expect(service['admin-status']).to.be.oneOf(['ietf-te-types:tunnel-state-' + state, 'ietf-te-types:tunnel-admin-state-' + state]);\r",
							"    pm.expect(service).to.have.property('state');\r",
							"    pm.expect(service['state']).to.have.property('operational-state','ietf-te-types:tunnel-state-' + state);\r",
							"    pm.expect(service['state']).to.have.property('provisioning-state','ietf-te-types:lsp-state-up');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4985e81e-2175-43c0-be59-f72d0171e5b2",
						"exec": [
							"pm.environment.unset('TD_SDN_RESTCONF_PATH');",
							"",
							"var settings = pm.environment.get('TD_SDN_SETTINGS');",
							"if (settings === undefined) {",
							"    throw new Error('Environment variable \"TD_SDN_SETTINGS\" is undefined. '",
							"            + 'Please run \"Setup\" Request of \"TD_SDN_INIT\" collection.');",
							"}",
							"var companyName = pm.environment.get('TD_SDN_COMPANY');",
							"if (companyName === undefined) {",
							"    throw new Error('Environment variable \"TD_SDN_COMPANY\" is undefined. '",
							"            + 'Please define it in your environment');",
							"}",
							"var companySettings = settings.companies[companyName];",
							"if (companySettings === undefined) {",
							"    throw new Error('Unknown company \"' + companyName + '\"');",
							"}",
							"",
							"pm.environment.set('TD_SDN_RESTCONF_PATH', companySettings.restconfPath);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{TD_SDN_RESTCONF_PATH}}/data/ietf-eth-tran-service:etht-svc",
					"host": [
						"{{TD_SDN_RESTCONF_PATH}}"
					],
					"path": [
						"data",
						"ietf-eth-tran-service:etht-svc"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
