{
	"info": {
		"_postman_id": "263376a9-3ecb-4d73-8ba9-8946a8bf9b1a",
		"name": "TD_MSP_02",
		"description": "Interoperability Test Description\r\nIdentifier\tTD_ SDN_SSP_02\r\nTest Objective\tThe service topology information is requested from the single DC under test in TD_SDN_SSP_01. The received information is checked to correctly list the newly created service.\r\nConfiguration\tCFG_03\r\nReferences\t\r\nApplicability\tMW_8040, MW_8345, MW_TETOPO, MW_MWTOPO, MW_ETHSVC\r\n\r\nPre-test conditions\t•\tThe Domain Controller instance is up and running normally\r\n•\tAll the devices are upgraded to correct versions\r\n•\tAll basic configurations are completed (e.g., NE_id, OSPF, PCEP, etc.) \r\n•\tThe Restconf server is serviceable.\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TD_MSP_02-Step-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27d06c73-3416-431a-ab9c-51bf59c2b2f8",
						"exec": [
							"// clean environment variables",
							"pm.environment.unset('TD_SDN_RESTCONF_PATH');",
							"",
							"// Step-1, validation: The response body should contain information about the created L2 service in JSON format referring to Annex D.3",
							"pm.test('Response is OK', function() {",
							"    pm.expect(pm.response).to.have.property('code', 200);",
							"});",
							"var responseJson = pm.response.json();",
							"",
							"var settings = pm.environment.get('TD_SDN_SETTINGS');",
							"var tree = pm.environment.get('TD_SDN_TREE');",
							"",
							"var treeIndex = parseInt(tree) - 1;",
							"var companyName = settings.trees[treeIndex][pm.info.iteration];",
							"var companySettings = settings.companies[companyName];",
							"",
							"// applicable only for Intracom Domain",
							"var currentlyActiveLocalService;",
							"if (companyName === 'Intracom') {",
							"    currentlyActiveLocalService = pm.environment.get('TD_SDN_ICOM_ACTIVE_LOCAL_SERVICE');",
							"}",
							"",
							"var profileName = 'bw_profile_' + settings.servicename;",
							"",
							"var CIR_value = settings.cir;",
							"var EIR_value = settings.eir;",
							"var provider_id = companySettings.ethProviderId;",
							"var client_id = companySettings.ethClientId;",
							"var eth_topology_id = companySettings.ethTopologyId;",
							"",
							"// id of the nodes",
							"var access_node_1_id = companySettings.svc['access-port1']['access-node-id'];",
							"var access_node_2_id = companySettings.svc['access-port2']['access-node-id'];",
							"",
							"// id of node1 -> a-link-aggr",
							"var access_node_1_ltp_aggr_access_port_id = 1;",
							"var access_node_1_ltp_aggr_access_ltp_id  = companySettings.svc['access-port1']['a-link-aggr-id'];",
							"",
							"// id of node2 -> a-link-local",
							"var access_node_2_ltp_local_access_port_id = 2; ",
							"var access_node_2_ltp_local_access_ltp_id  = companySettings.svc['access-port2']['a-link-local-id'];",
							"",
							"// id of node2 -> inter-d-w",
							"var access_node_2_ltp_west_access_port_id  = 2;",
							"var access_node_2_ltp_west_access_ltp_id   = companySettings.svc['access-port2']['i-d-link-W-id'];",
							"",
							"// id of node2 -> inter-d-e",
							"var access_node_2_ltp_east_access_port_id  = 2;",
							"var access_node_2_ltp_east_access_ltp_id   = companySettings.svc['access-port2']['i-d-link-E-id'];",
							"",
							"var sVlan = 'ietf-eth-tran-types:classify-s-vlan';",
							"var cVlan = 'ietf-eth-tran-types:classify-c-vlan';",
							"",
							"var bandwidthProfile = null;",
							"",
							"var serviceNames;",
							"if (pm.info.iteration === 0) {",
							"    serviceNames = ['S1-local', 'S2-local-1', 'S3-local-1', 'S1-inter-d-1', 'S2-inter-d-1', 'S3-inter-d-1', 'S4-inter-d-1', 'S1-leaf-2', 'S2-leaf-2', 'S3-leaf-1'];",
							"} else if (pm.info.iteration === 1) {",
							"    serviceNames = ['S1-local-1', 'S1-inter-d-2', 'S2-inter-d-2', 'S1-leaf-1', 'S2-leaf-1'];",
							"} else if (pm.info.iteration === 2) {",
							"    serviceNames = ['S3-local-1', 'S3-inter-d-2', 'S4-inter-d-2', 'S2-leaf-3', 'S3-leaf-2'];",
							"}",
							"",
							"(function() {",
							"    var topLevelPropertyName = responseJson.hasOwnProperty('etht-svc') ? 'etht-svc' : 'ietf-eth-tran-service:etht-svc';",
							"    var topLevelObject = null;",
							"    pm.test('validate Response Body', function() {",
							"        pm.expect(responseJson).to.have.property(topLevelPropertyName);",
							"        topLevelObject = responseJson[topLevelPropertyName];",
							"    });",
							"    ",
							"    pm.test('Validate Response Body for \"globals\" node', function() {",
							"        pm.expect(topLevelObject).to.have.property('globals');",
							"        pm.expect(responseJson[topLevelPropertyName].globals).to.have.property('etht-svc-bandwidth-profiles');",
							"        var profileArr = responseJson[topLevelPropertyName].globals['etht-svc-bandwidth-profiles'];",
							"        pm.expect(Array.isArray(profileArr)).be.true;",
							"        bandwidthProfile = findOurBWProfile(profileArr);",
							"    });",
							"    ",
							"    checkExistenceOfProfile(bandwidthProfile);",
							"    validateProfileValues(bandwidthProfile);",
							"    ",
							"    pm.test('Validate Response Body for \"etht-svc-instances\" array', function() {",
							"        pm.expect(topLevelObject).to.have.property('etht-svc-instances');",
							"        var instanceArr = topLevelObject['etht-svc-instances'];",
							"        pm.expect(Array.isArray(instanceArr)).be.true;",
							"    });",
							"    ",
							"    var serviceInstances = responseJson[topLevelPropertyName][\"etht-svc-instances\"];",
							"    pm.test('Validation Response body for services', function() {",
							"        for(var i = 0; i < serviceNames.length; i++) {",
							"            var serviceName = serviceNames[i];",
							"            var service = findOurServiceWithServiceName(serviceInstances, serviceName);",
							"            checkExistenceOfService(service, serviceName);",
							"            validateServiceValues(pm.info.iteration + 1, service, serviceName);",
							"        }",
							"    });",
							"}());",
							"",
							"function findOurServiceWithServiceName(instanceArr, serviceName) {",
							"    var len = instanceArr.length;",
							"    for (var i = 0; i < len; ++i) {",
							"        var svc = instanceArr[i];",
							"        if (svc['etht-svc-name'] === serviceName) {",
							"            return svc;",
							"        }",
							"    }",
							"    return null;",
							"}",
							"",
							"function findOurBWProfile(profileArr) {",
							"    var len = profileArr.length;",
							"    for (var i = 0; i < len; ++i) {",
							"        var prof = profileArr[i];",
							"        if (prof['bandwidth-profile-name'] === profileName) {",
							"            return prof;",
							"        }",
							"    }",
							"    return null;",
							"}",
							"",
							"function checkExistenceOfProfile(bandwidthProfile) {",
							"    pm.test(\"Bandwidth profile existence check\", function(){",
							"        pm.expect(bandwidthProfile !== null).to.be.true;",
							"    });",
							"}",
							"",
							"function validateProfileValues(bandwidthProfile) {",
							"    pm.test('Bandwidth profile values check', function(){",
							"        pm.expect(bandwidthProfile).to.have.property('bandwidth-profile-type','ietf-eth-tran-types:mef-10-bwp');",
							"        pm.expect(bandwidthProfile).to.have.property('CIR');",
							"        pm.expect(parseInt(bandwidthProfile['CIR'])).to.equal(parseInt(CIR_value));",
							"        pm.expect(bandwidthProfile).to.have.property('EIR');",
							"        pm.expect(parseInt(bandwidthProfile['EIR'])).to.equal(parseInt(EIR_value));",
							"        pm.expect(bandwidthProfile).to.have.property('color-aware');",
							"        if (typeof(bandwidthProfile['color-aware']) === 'boolean') {",
							"            pm.expect(bandwidthProfile['color-aware']).be.true;",
							"        } else {",
							"            pm.expect('' + bandwidthProfile['color-aware']).to.equal('' + true);",
							"        }",
							"        pm.expect(bandwidthProfile).to.have.property('coupling-flag');",
							"        if (typeof(bandwidthProfile['coupling-flag']) === 'boolean') {",
							"            pm.expect(bandwidthProfile['coupling-flag']).be.true;",
							"        } else {",
							"            pm.expect('' + bandwidthProfile['coupling-flag']).to.equal('' + true);",
							"        }",
							"    });",
							"}",
							"",
							"function checkExistenceOfService(service, serviceName) {",
							"    pm.test('Service existence check:' + serviceName, function(){",
							"        pm.expect(service !== null).to.be.true;",
							"    });",
							"}",
							"",
							"function validateServiceValues(domainIndex, service) {",
							"    var serviceName = service['etht-svc-name'];",
							"    ",
							"    pm.test('Validate service values: ' + serviceName, function() {",
							"        checkServiceBeginning(service);",
							"        checkServiceEnding(service);",
							"        ",
							"        var accessPortId1 = 1;",
							"        var accessNodeId1;",
							"        var accessLtpId1;",
							"        var vlanId1;",
							"        var vlanType1;",
							"        ",
							"        var accessPortId2 = 2;",
							"        var accessNodeId2;",
							"        var accessLtpId2;",
							"        var vlanId2;",
							"        var vlanType2;",
							"        ",
							"        if (1 === domainIndex) {",
							"            if (       'S1-local'     === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 201;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId2 = 101;",
							"                vlanType2 = cVlan;",
							"            } else if ('S2-local-1'   === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 202;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId2 = 202;",
							"                vlanType2 = sVlan;",
							"            } else if ('S3-local-1'   === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 203;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 203;",
							"                vlanType2 = sVlan;",
							"            } else if ('S1-inter-d-1' === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 204;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId2 = 204;",
							"                vlanType2 = sVlan;",
							"            } else if ('S2-inter-d-1' === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 205;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId2 = 205;",
							"                vlanType2 = sVlan;",
							"            } else if ('S3-inter-d-1' === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 206;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 206;",
							"                vlanType2 = sVlan;",
							"            } else if ('S4-inter-d-1' === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 207;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 207;",
							"                vlanType2 = sVlan;",
							"            } else if ('S1-leaf-2'    === serviceName) {",
							"                accessNodeId1 = access_node_2_id;",
							"                accessLtpId1  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId1 = 208;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 208;",
							"                vlanType2 = sVlan;",
							"            } else if ('S2-leaf-2'    === serviceName) {",
							"                accessNodeId1 = access_node_2_id;",
							"                accessLtpId1  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId1 = 209;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId2 = 103;",
							"                vlanType2 = cVlan; ",
							"            } else if ('S3-leaf-1'    === serviceName) {",
							"                accessNodeId1 = access_node_2_id;",
							"                accessLtpId1  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId1 = 104;",
							"                vlanType1 = cVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 210;",
							"                vlanType2 = sVlan;",
							"            }",
							"        } else if (2 === domainIndex) {",
							"             if (       'S2-local-2'     === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 202;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId2 = 101;",
							"                vlanType2 = cVlan;",
							"            } else if ('S1-inter-d-2'   === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 204;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId2 = 204;",
							"                vlanType2 = sVlan;",
							"            } else if ('S2-inter-d-2'   === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 205;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 205;",
							"                vlanType2 = sVlan;",
							"            } else if ('S1-leaf-1' === serviceName) {",
							"                accessNodeId1 = access_node_2_id;",
							"                accessLtpId1  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId1 = 102;",
							"                vlanType1 = cVlan;",
							"                accessNodeId2 = access_node_1_id;",
							"                accessLtpId2  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId2 = 208;",
							"                vlanType2 = sVlan;",
							"            } else if ('S2-leaf-2' === serviceName) {",
							"                accessNodeId1 = access_node_2_id;",
							"                accessLtpId1  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId1 = 103;",
							"                vlanType1 = cVlan;",
							"                accessNodeId2 = access_node_1_id;",
							"                accessLtpId2  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId2 = 209;",
							"                vlanType2 = sVlan;",
							"            }    ",
							"        } else if (3 === domainIndex) {",
							"            if (       'S3-local-2'     === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 203;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId2 = 101;",
							"                vlanType2 = cVlan;",
							"            } else if ('S3-inter-d-2'   === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 206;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_west_access_ltp_id;",
							"                vlanId2 = 206;",
							"                vlanType2 = sVlan;",
							"            } else if ('S4-inter-d-2'   === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 207;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_east_access_ltp_id;",
							"                vlanId2 = 207;",
							"                vlanType2 = sVlan;",
							"            } else if ('S1-leaf-3' === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 208;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId2 = 102;",
							"                vlanType2 = cVlan;",
							"            } else if ('S3-leaf-2' === serviceName) {",
							"                accessNodeId1 = access_node_1_id;",
							"                accessLtpId1  = access_node_1_ltp_aggr_access_ltp_id;",
							"                vlanId1 = 210;",
							"                vlanType1 = sVlan;",
							"                accessNodeId2 = access_node_2_id;",
							"                accessLtpId2  = access_node_2_ltp_local_access_ltp_id;",
							"                vlanId2 = 104;",
							"                vlanType2 = cVlan;",
							"            }    ",
							"        }",
							"        ",
							"        checkServiceElement(service, 0, accessPortId1, accessNodeId1, accessLtpId1, vlanId1, vlanType1);",
							"        checkServiceElement(service, 1, accessPortId2, accessNodeId2, accessLtpId2, vlanId2, vlanType2);",
							"    });",
							"    ",
							"}",
							"",
							"function checkServiceBeginning(service) {",
							"    pm.expect(service).to.have.property('etht-svc-type','ietf-eth-tran-types:p2p-svc');",
							"    pm.expect(service).to.have.property('access-provider-id',provider_id);",
							"    pm.expect(service).to.have.property('access-client-id',client_id);",
							"    pm.expect(service).to.have.property('access-topology-id',eth_topology_id);",
							"}",
							"",
							"function checkServiceElement(service, n, accessPortId, accessNodeId, accessLtpPortId, vlanId, vlanType) {",
							"    pm.expect(service['etht-svc-access-ports'][n]).to.have.property('access-port-id',accessPortId);",
							"    pm.expect(service['etht-svc-access-ports'][n]).to.have.property('access-node-id',accessNodeId);",
							"    pm.expect(service['etht-svc-access-ports'][n]).to.have.property('access-ltp-id', accessLtpPortId);",
							"    pm.expect(service['etht-svc-access-ports'][n]).to.have.property('service-classification-type','ietf-eth-tran-types:vlan-classification');",
							"    pm.expect(service['etht-svc-access-ports'][n]).to.have.property('outer-tag');",
							"    pm.expect(service['etht-svc-access-ports'][n]['outer-tag']).to.have.property('tag-type',vlanType);",
							"    pm.expect(service['etht-svc-access-ports'][n]['outer-tag']).to.have.property('vlan-value', vlanId);",
							"    if (vlanType === 'ietf-eth-tran-types:classify-c-vlan') {",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.have.property('ingress-egress-bandwidth-profile-name', profileName);",
							"    } else {",
							"        pm.expect(service['etht-svc-access-ports'][n]).to.not.have.property('ingress-egress-bandwidth-profile-name');",
							"    }",
							"}",
							"",
							"function checkServiceEnding(service) {",
							"    var state = \"up\";",
							"    var serviceName = service[\"etht-svc-name\"];",
							"    if ('Intracom' === companyName && ['S1-local', 'S3-leaf-1', 'S2-leaf-2'].includes(serviceName) && currentlyActiveLocalService !== serviceName) {",
							"        state = \"down\";",
							"    }",
							"    pm.expect(service).to.have.property('admin-status','ietf-te-types:tunnel-state-' + state);",
							"    pm.expect(service).to.have.property('state');",
							"    pm.expect(service['state']).to.have.property('operational-state','ietf-te-types:tunnel-state-' + state);",
							"    pm.expect(service['state']).to.have.property('provisioning-state','ietf-te-types:lsp-state-up');",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d8db2f60-2f1c-44a0-9780-ce327e9a1a09",
						"exec": [
							"pm.environment.unset('TD_SDN_RESTCONF_PATH');",
							"",
							"if (pm.info.iterationCount !== 3) {",
							"    throw new Error('This collection MUST be run with 3 iterations; One for each domain of the tree');",
							"}",
							"",
							"var settings = pm.environment.get('TD_SDN_SETTINGS');",
							"if (settings === undefined) {",
							"    throw new Error('Environment variable \"TD_SDN_SETTINGS\" is undefined. '",
							"            + 'Please run \"Setup\" Request of \"TD_SDN_INIT\" collection.');",
							"}",
							"",
							"var tree = pm.environment.get('TD_SDN_TREE');",
							"if (tree === undefined) {",
							"    throw new Error('Environment variable \"TD_SDN_TREE\" is undefined. '",
							"            + 'Please run \"Setup\" Request of \"TD_SDN_INIT\" collection.');",
							"}",
							"",
							"var treeIndex = parseInt(tree) - 1;",
							"var companyName = settings.trees[treeIndex][pm.info.iteration];",
							"var companySettings = settings.companies[companyName];",
							"",
							"pm.environment.set('TD_SDN_RESTCONF_PATH', companySettings.restconfPath);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{TD_SDN_RESTCONF_PATH}}/data/ietf-eth-tran-service:etht-svc",
					"host": [
						"{{TD_SDN_RESTCONF_PATH}}"
					],
					"path": [
						"data",
						"ietf-eth-tran-service:etht-svc"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}